// Copyright (C) 1991-2014 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/25/2015 17:05:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    comparator32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module comparator32_vlg_sample_tst(
	D1,
	D2,
	sampler_tx
);
input [31:0] D1;
input [31:0] D2;
output sampler_tx;

reg sample;
time current_time;
always @(D1 or D2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module comparator32_vlg_check_tst (
	Z,
	sampler_rx
);
input  Z;
input sampler_rx;

reg  Z_expected;

reg  Z_prev;

reg  Z_expected_prev;

reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Z_expected_prev = Z_expected;
end



// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Z = %b | ",Z_expected_prev);
	$display("| real Z = %b | ",Z_prev);
`endif
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module comparator32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] D1;
reg [31:0] D2;
// wires                                               
wire Z;

wire sampler;                             

// assign statements (if any)                          
comparator32 i1 (
// port map - connection between master ports and signals/registers   
	.D1(D1),
	.D2(D2),
	.Z(Z)
);
// D1[ 31 ]
initial
begin
	D1[31] = 1'b0;
end 
// D1[ 30 ]
initial
begin
	D1[30] = 1'b0;
end 
// D1[ 29 ]
initial
begin
	D1[29] = 1'b0;
end 
// D1[ 28 ]
initial
begin
	D1[28] = 1'b0;
end 
// D1[ 27 ]
initial
begin
	D1[27] = 1'b0;
end 
// D1[ 26 ]
initial
begin
	D1[26] = 1'b0;
end 
// D1[ 25 ]
initial
begin
	D1[25] = 1'b0;
end 
// D1[ 24 ]
initial
begin
	D1[24] = 1'b0;
end 
// D1[ 23 ]
initial
begin
	D1[23] = 1'b0;
end 
// D1[ 22 ]
initial
begin
	D1[22] = 1'b0;
end 
// D1[ 21 ]
initial
begin
	D1[21] = 1'b0;
end 
// D1[ 20 ]
initial
begin
	D1[20] = 1'b0;
end 
// D1[ 19 ]
initial
begin
	D1[19] = 1'b0;
end 
// D1[ 18 ]
initial
begin
	D1[18] = 1'b0;
end 
// D1[ 17 ]
initial
begin
	D1[17] = 1'b0;
end 
// D1[ 16 ]
initial
begin
	D1[16] = 1'b0;
end 
// D1[ 15 ]
initial
begin
	D1[15] = 1'b0;
end 
// D1[ 14 ]
initial
begin
	D1[14] = 1'b0;
end 
// D1[ 13 ]
initial
begin
	D1[13] = 1'b0;
end 
// D1[ 12 ]
initial
begin
	D1[12] = 1'b0;
end 
// D1[ 11 ]
initial
begin
	D1[11] = 1'b0;
end 
// D1[ 10 ]
initial
begin
	D1[10] = 1'b0;
end 
// D1[ 9 ]
initial
begin
	D1[9] = 1'b0;
end 
// D1[ 8 ]
initial
begin
	D1[8] = 1'b0;
end 
// D1[ 7 ]
initial
begin
	D1[7] = 1'b0;
end 
// D1[ 6 ]
initial
begin
	D1[6] = 1'b0;
end 
// D1[ 5 ]
initial
begin
	D1[5] = 1'b0;
end 
// D1[ 4 ]
initial
begin
	D1[4] = 1'b0;
end 
// D1[ 3 ]
initial
begin
	D1[3] = 1'b0;
end 
// D1[ 2 ]
initial
begin
	D1[2] = 1'b0;
end 
// D1[ 1 ]
initial
begin
	D1[1] = 1'b0;
end 
// D1[ 0 ]
initial
begin
	D1[0] = 1'b0;
end 
// D2[ 31 ]
initial
begin
	D2[31] = 1'b0;
end 
// D2[ 30 ]
initial
begin
	D2[30] = 1'b0;
end 
// D2[ 29 ]
initial
begin
	D2[29] = 1'b0;
end 
// D2[ 28 ]
initial
begin
	D2[28] = 1'b0;
end 
// D2[ 27 ]
initial
begin
	D2[27] = 1'b0;
end 
// D2[ 26 ]
initial
begin
	D2[26] = 1'b0;
end 
// D2[ 25 ]
initial
begin
	D2[25] = 1'b0;
end 
// D2[ 24 ]
initial
begin
	D2[24] = 1'b0;
end 
// D2[ 23 ]
initial
begin
	D2[23] = 1'b0;
end 
// D2[ 22 ]
initial
begin
	D2[22] = 1'b0;
end 
// D2[ 21 ]
initial
begin
	D2[21] = 1'b0;
end 
// D2[ 20 ]
initial
begin
	D2[20] = 1'b0;
end 
// D2[ 19 ]
initial
begin
	D2[19] = 1'b0;
end 
// D2[ 18 ]
initial
begin
	D2[18] = 1'b0;
end 
// D2[ 17 ]
initial
begin
	D2[17] = 1'b0;
end 
// D2[ 16 ]
initial
begin
	D2[16] = 1'b0;
end 
// D2[ 15 ]
initial
begin
	D2[15] = 1'b0;
end 
// D2[ 14 ]
initial
begin
	D2[14] = 1'b0;
end 
// D2[ 13 ]
initial
begin
	D2[13] = 1'b0;
end 
// D2[ 12 ]
initial
begin
	D2[12] = 1'b0;
end 
// D2[ 11 ]
initial
begin
	D2[11] = 1'b0;
end 
// D2[ 10 ]
initial
begin
	D2[10] = 1'b0;
end 
// D2[ 9 ]
initial
begin
	D2[9] = 1'b0;
end 
// D2[ 8 ]
initial
begin
	D2[8] = 1'b0;
end 
// D2[ 7 ]
initial
begin
	D2[7] = 1'b0;
end 
// D2[ 6 ]
initial
begin
	D2[6] = 1'b0;
end 
// D2[ 5 ]
initial
begin
	D2[5] = 1'b0;
end 
// D2[ 4 ]
initial
begin
	D2[4] = 1'b0;
end 
// D2[ 3 ]
initial
begin
	D2[3] = 1'b0;
end 
// D2[ 2 ]
initial
begin
	D2[2] = 1'b0;
end 
// D2[ 1 ]
initial
begin
	D2[1] = 1'b0;
end 
// D2[ 0 ]
initial
begin
	D2[0] = 1'b0;
end 

comparator32_vlg_sample_tst tb_sample (
	.D1(D1),
	.D2(D2),
	.sampler_tx(sampler)
);

comparator32_vlg_check_tst tb_out(
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

